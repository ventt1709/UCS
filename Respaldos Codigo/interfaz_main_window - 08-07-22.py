# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_Window.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from re import findall
from pandas import read_csv
import numpy as np
from time import sleep
from matplotlib import pyplot as plt
from matplotlib import use as mpluse
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas, NavigationToolbar2QT as Navi
from matplotlib.widgets import SpanSelector

from clase_plot_pre_peak import Grafico

mpluse('Qt5Agg')


class Ui_MainWindow(object):

    def __init__(self):
        self.checkbox = []

        # CONTADOR DE LA FUNCION SIGNALS
        self.contador_eje_grafico = 0

    def setupUi(self, ModulosElasticos):
        ModulosElasticos.setObjectName("ModulosElasticos")
        ModulosElasticos.resize(1608, 697)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ModulosElasticos.sizePolicy().hasHeightForWidth())
        ModulosElasticos.setSizePolicy(sizePolicy)
        ModulosElasticos.setMinimumSize(QtCore.QSize(1516, 697))
        ModulosElasticos.setMaximumSize(QtCore.QSize(1800, 950))
        ModulosElasticos.setMouseTracking(False)
        ModulosElasticos.setStyleSheet("background-image: url(:/Background/background_image.jpg);\n"
                                       "background-color: rgb(244, 253, 255);\n"
                                       "\n"
                                       "background-repeat: no-repeat;\n"
                                       "background-position: center;")
        self.centralwidget = QtWidgets.QWidget(ModulosElasticos)
        self.centralwidget.setStyleSheet("background-image: url(:/Background/background_image.jpg);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_20 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_20.setObjectName("gridLayout_20")
        self.gridLayout_19 = QtWidgets.QGridLayout()
        self.gridLayout_19.setObjectName("gridLayout_19")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setMaximumSize(QtCore.QSize(270, 16777215))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.button_importarArchivo = QtWidgets.QPushButton(self.frame_3)
        self.button_importarArchivo.setStyleSheet("\n"
                                                  "background-color: rgb(226, 241, 255);")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("recursos/Images/Importar_Archivo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button_importarArchivo.setIcon(icon)
        self.button_importarArchivo.setIconSize(QtCore.QSize(28, 28))
        self.button_importarArchivo.setObjectName("button_importarArchivo")
        self.gridLayout_2.addWidget(self.button_importarArchivo, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(78, 28, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_nombre_archivo = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_nombre_archivo.setFont(font)
        self.label_nombre_archivo.setStyleSheet("background-color: rgb(234, 246, 255);")
        self.label_nombre_archivo.setText("")
        self.label_nombre_archivo.setObjectName("label_nombre_archivo")
        self.gridLayout_2.addWidget(self.label_nombre_archivo, 1, 0, 1, 2)
        self.button_modulosElasticos = QtWidgets.QPushButton(self.frame_3)
        self.button_modulosElasticos.setStyleSheet("\n"
                                                   "background-color: rgb(226, 241, 255);")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("recursos/Images/Curva_Esfuerzo_DeformacioÃÅn.png"), QtGui.QIcon.Normal,
                        QtGui.QIcon.Off)
        self.button_modulosElasticos.setIcon(icon1)
        self.button_modulosElasticos.setIconSize(QtCore.QSize(28, 28))
        self.button_modulosElasticos.setObjectName("button_modulosElasticos")
        self.gridLayout_2.addWidget(self.button_modulosElasticos, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(78, 28, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 2, 1, 1, 1)
        self.button_guardar = QtWidgets.QPushButton(self.frame_3)
        self.button_guardar.setStyleSheet("\n"
                                          "background-color: rgb(226, 241, 255);")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("recursos/Images/Exportar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.button_guardar.setIcon(icon2)
        self.button_guardar.setIconSize(QtCore.QSize(28, 28))
        self.button_guardar.setObjectName("button_guardar")
        self.gridLayout_2.addWidget(self.button_guardar, 3, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(78, 28, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem2, 3, 1, 1, 1)
        self.verticalLayout_9.addLayout(self.gridLayout_2)
        self.progressBar = QtWidgets.QProgressBar(self.frame_3)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_9.addWidget(self.progressBar)
        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setStyleSheet("background-color: rgb(234, 246, 255);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout_9.addWidget(self.label)
        self.gridLayout_19.addWidget(self.frame_3, 0, 0, 1, 1)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setMaximumSize(QtCore.QSize(270, 16777215))
        self.frame.setStyleSheet("background-color: rgb(165, 165, 165);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.toolBox = QtWidgets.QToolBox(self.frame)
        self.toolBox.setMinimumSize(QtCore.QSize(200, 0))
        self.toolBox.setMaximumSize(QtCore.QSize(250, 2000))
        self.toolBox.setStyleSheet("\n"
                                   "background-color: rgb(185, 213, 255);\n"
                                   "alternate-background-color: rgb(226, 235, 255);\n"
                                   "border-color: rgb(0, 0, 0);\n"
                                   "")
        self.toolBox.setObjectName("toolBox")
        self.page_def_axial_SG = QtWidgets.QWidget()
        self.page_def_axial_SG.setGeometry(QtCore.QRect(0, 0, 234, 283))
        self.page_def_axial_SG.setStyleSheet("background-color: rgb(224, 237, 255);")
        self.page_def_axial_SG.setObjectName("page_def_axial_SG")
        self.gridLayout_21 = QtWidgets.QGridLayout(self.page_def_axial_SG)
        self.gridLayout_21.setObjectName("gridLayout_21")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_def_axial_SG = QtWidgets.QFrame(self.page_def_axial_SG)
        self.frame_def_axial_SG.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_def_axial_SG.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_def_axial_SG.setObjectName("frame_def_axial_SG")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_def_axial_SG)
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.checkBox_elemento1 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento1.setObjectName("checkBox_elemento1")
        self.verticalLayout_12.addWidget(self.checkBox_elemento1)
        self.checkBox_elemento2 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento2.setObjectName("checkBox_elemento2")
        self.verticalLayout_12.addWidget(self.checkBox_elemento2)
        self.checkBox_elemento3 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento3.setObjectName("checkBox_elemento3")
        self.verticalLayout_12.addWidget(self.checkBox_elemento3)
        self.checkBox_elemento4 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento4.setObjectName("checkBox_elemento4")
        self.verticalLayout_12.addWidget(self.checkBox_elemento4)
        self.checkBox_elemento5 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento5.setObjectName("checkBox_elemento5")
        self.verticalLayout_12.addWidget(self.checkBox_elemento5)
        self.checkBox_elemento6 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento6.setObjectName("checkBox_elemento6")
        self.verticalLayout_12.addWidget(self.checkBox_elemento6)
        self.checkBox_elemento6_2 = QtWidgets.QCheckBox(self.frame_def_axial_SG)
        self.checkBox_elemento6_2.setObjectName("checkBox_elemento6_2")
        self.verticalLayout_12.addWidget(self.checkBox_elemento6_2)
        self.gridLayout.addLayout(self.verticalLayout_12, 0, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.frame_def_axial_SG)
        spacerItem3 = QtWidgets.QSpacerItem(20, 108, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem3)
        self.gridLayout_21.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
        self.toolBox.addItem(self.page_def_axial_SG, "")
        self.page_def_diam_SG = QtWidgets.QWidget()
        self.page_def_diam_SG.setGeometry(QtCore.QRect(0, 0, 234, 283))
        self.page_def_diam_SG.setStyleSheet("background-color: rgb(224, 237, 255);")
        self.page_def_diam_SG.setObjectName("page_def_diam_SG")
        self.gridLayout_22 = QtWidgets.QGridLayout(self.page_def_diam_SG)
        self.gridLayout_22.setObjectName("gridLayout_22")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_def_diam_SG_2 = QtWidgets.QFrame(self.page_def_diam_SG)
        self.frame_def_diam_SG_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_def_diam_SG_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_def_diam_SG_2.setObjectName("frame_def_diam_SG_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_def_diam_SG_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.checkBox_elemento7 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento7.setObjectName("checkBox_elemento7")
        self.verticalLayout_3.addWidget(self.checkBox_elemento7)
        self.checkBox_elemento8 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento8.setObjectName("checkBox_elemento8")
        self.verticalLayout_3.addWidget(self.checkBox_elemento8)
        self.checkBox_elemento9 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento9.setObjectName("checkBox_elemento9")
        self.verticalLayout_3.addWidget(self.checkBox_elemento9)
        self.checkBox_elemento10 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento10.setObjectName("checkBox_elemento10")
        self.verticalLayout_3.addWidget(self.checkBox_elemento10)
        self.checkBox_elemento11 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento11.setObjectName("checkBox_elemento11")
        self.verticalLayout_3.addWidget(self.checkBox_elemento11)
        self.checkBox_elemento12 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento12.setObjectName("checkBox_elemento12")
        self.verticalLayout_3.addWidget(self.checkBox_elemento12)
        self.checkBox_elemento12_2 = QtWidgets.QCheckBox(self.frame_def_diam_SG_2)
        self.checkBox_elemento12_2.setObjectName("checkBox_elemento12_2")
        self.verticalLayout_3.addWidget(self.checkBox_elemento12_2)
        self.verticalLayout_6.addWidget(self.frame_def_diam_SG_2)
        spacerItem4 = QtWidgets.QSpacerItem(168, 18, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_6.addItem(spacerItem4)
        self.gridLayout_22.addLayout(self.verticalLayout_6, 0, 0, 1, 1)
        self.toolBox.addItem(self.page_def_diam_SG, "")
        self.page_def_axial_PP = QtWidgets.QWidget()
        self.page_def_axial_PP.setGeometry(QtCore.QRect(0, 0, 234, 283))
        self.page_def_axial_PP.setStyleSheet("background-color: rgb(224, 237, 255);")
        self.page_def_axial_PP.setObjectName("page_def_axial_PP")
        self.gridLayout_23 = QtWidgets.QGridLayout(self.page_def_axial_PP)
        self.gridLayout_23.setObjectName("gridLayout_23")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame_def_axial_PP_3 = QtWidgets.QFrame(self.page_def_axial_PP)
        self.frame_def_axial_PP_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_def_axial_PP_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_def_axial_PP_3.setObjectName("frame_def_axial_PP_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_def_axial_PP_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.checkBox_elemento13 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento13.setObjectName("checkBox_elemento13")
        self.verticalLayout_4.addWidget(self.checkBox_elemento13)
        self.checkBox_elemento14 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento14.setObjectName("checkBox_elemento14")
        self.verticalLayout_4.addWidget(self.checkBox_elemento14)
        self.checkBox_elemento15 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento15.setObjectName("checkBox_elemento15")
        self.verticalLayout_4.addWidget(self.checkBox_elemento15)
        self.checkBox_elemento16 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento16.setObjectName("checkBox_elemento16")
        self.verticalLayout_4.addWidget(self.checkBox_elemento16)
        self.checkBox_elemento17 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento17.setObjectName("checkBox_elemento17")
        self.verticalLayout_4.addWidget(self.checkBox_elemento17)
        self.checkBox_elemento18 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento18.setObjectName("checkBox_elemento18")
        self.verticalLayout_4.addWidget(self.checkBox_elemento18)
        self.checkBox_elemento18_2 = QtWidgets.QCheckBox(self.frame_def_axial_PP_3)
        self.checkBox_elemento18_2.setObjectName("checkBox_elemento18_2")
        self.verticalLayout_4.addWidget(self.checkBox_elemento18_2)
        self.verticalLayout_7.addWidget(self.frame_def_axial_PP_3)
        spacerItem5 = QtWidgets.QSpacerItem(20, 88, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem5)
        self.gridLayout_23.addLayout(self.verticalLayout_7, 0, 0, 1, 1)
        self.toolBox.addItem(self.page_def_axial_PP, "")
        self.page_def_diam_PP = QtWidgets.QWidget()
        self.page_def_diam_PP.setGeometry(QtCore.QRect(0, 0, 234, 283))
        self.page_def_diam_PP.setStyleSheet("background-color: rgb(224, 237, 255);")
        self.page_def_diam_PP.setObjectName("page_def_diam_PP")
        self.gridLayout_24 = QtWidgets.QGridLayout(self.page_def_diam_PP)
        self.gridLayout_24.setObjectName("gridLayout_24")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.frame_def_diam_PP_4 = QtWidgets.QFrame(self.page_def_diam_PP)
        self.frame_def_diam_PP_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_def_diam_PP_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_def_diam_PP_4.setObjectName("frame_def_diam_PP_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_def_diam_PP_4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.checkBox_elemento19 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento19.setObjectName("checkBox_elemento19")
        self.verticalLayout_5.addWidget(self.checkBox_elemento19)
        self.checkBox_elemento20 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento20.setObjectName("checkBox_elemento20")
        self.verticalLayout_5.addWidget(self.checkBox_elemento20)
        self.checkBox_elemento21 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento21.setObjectName("checkBox_elemento21")
        self.verticalLayout_5.addWidget(self.checkBox_elemento21)
        self.checkBox_elemento22 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento22.setObjectName("checkBox_elemento22")
        self.verticalLayout_5.addWidget(self.checkBox_elemento22)
        self.checkBox_elemento23 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento23.setObjectName("checkBox_elemento23")
        self.verticalLayout_5.addWidget(self.checkBox_elemento23)
        self.checkBox_elemento24 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento24.setObjectName("checkBox_elemento24")
        self.verticalLayout_5.addWidget(self.checkBox_elemento24)
        self.checkBox_elemento24_2 = QtWidgets.QCheckBox(self.frame_def_diam_PP_4)
        self.checkBox_elemento24_2.setObjectName("checkBox_elemento24_2")
        self.verticalLayout_5.addWidget(self.checkBox_elemento24_2)
        self.verticalLayout_8.addWidget(self.frame_def_diam_PP_4)
        spacerItem6 = QtWidgets.QSpacerItem(20, 98, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem6)
        self.gridLayout_24.addLayout(self.verticalLayout_8, 0, 0, 1, 1)
        self.toolBox.addItem(self.page_def_diam_PP, "")
        self.verticalLayout.addWidget(self.toolBox)
        self.button_agregar_a_tabla = QtWidgets.QPushButton(self.frame)
        self.button_agregar_a_tabla.setStyleSheet("background-color: rgb(156, 201, 255);")
        self.button_agregar_a_tabla.setObjectName("button_agregar_a_tabla")
        self.verticalLayout.addWidget(self.button_agregar_a_tabla)
        self.gridLayout_19.addWidget(self.frame, 1, 0, 1, 1)
        self.gridLayout_20.addLayout(self.gridLayout_19, 0, 0, 2, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_titulo_filtroDatos_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_titulo_filtroDatos_2.setMaximumSize(QtCore.QSize(250, 16777215))
        self.label_titulo_filtroDatos_2.setStyleSheet("background-color: rgb(185, 213, 255);")
        self.label_titulo_filtroDatos_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_titulo_filtroDatos_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_titulo_filtroDatos_2.setObjectName("label_titulo_filtroDatos_2")
        self.gridLayout_3.addWidget(self.label_titulo_filtroDatos_2, 0, 0, 1, 2)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setMaximumSize(QtCore.QSize(120, 16777215))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_3.addWidget(self.comboBox, 1, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMaximumSize(QtCore.QSize(120, 16777215))
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_3.addWidget(self.pushButton, 1, 1, 1, 1)
        self.gridLayout_20.addLayout(self.gridLayout_3, 0, 1, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setMaximumSize(QtCore.QSize(75, 16777215))
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_4.addWidget(self.pushButton_3, 1, 1, 1, 1)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setMaximumSize(QtCore.QSize(127, 16777215))
        self.lineEdit_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_7.setInputMask("")
        self.lineEdit_7.setClearButtonEnabled(True)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.gridLayout_4.addWidget(self.lineEdit_7, 1, 0, 1, 1)
        self.label_titulo_filtroDatos_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_titulo_filtroDatos_3.setMaximumSize(QtCore.QSize(208, 16777215))
        self.label_titulo_filtroDatos_3.setStyleSheet("background-color: rgb(185, 213, 255);")
        self.label_titulo_filtroDatos_3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_titulo_filtroDatos_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_titulo_filtroDatos_3.setObjectName("label_titulo_filtroDatos_3")
        self.gridLayout_4.addWidget(self.label_titulo_filtroDatos_3, 0, 0, 1, 2)
        self.gridLayout_20.addLayout(self.gridLayout_4, 0, 2, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(858, 58, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_20.addItem(spacerItem7, 0, 3, 1, 1)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setMinimumSize(QtCore.QSize(1260, 0))
        self.tabWidget.setStyleSheet("background-color: rgb(226, 241, 255);\n"
                                     "background-color: rgb(234, 246, 255);")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.tableView_Datos = QtWidgets.QTableView(self.tab)
        self.tableView_Datos.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableView_Datos.setObjectName("tableView_Datos")
        self.gridLayout_5.addWidget(self.tableView_Datos, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_2)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.tableView_Datos_completos = QtWidgets.QTableView(self.tab_2)
        self.tableView_Datos_completos.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tableView_Datos_completos.setObjectName("tableView_Datos_completos")
        self.gridLayout_6.addWidget(self.tableView_Datos_completos, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.gridLayout_30 = QtWidgets.QGridLayout(self.tab_4)
        self.gridLayout_30.setObjectName("gridLayout_30")
        self.frame_4 = QtWidgets.QFrame(self.tab_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_4.sizePolicy().hasHeightForWidth())
        self.frame_4.setSizePolicy(sizePolicy)
        self.frame_4.setMaximumSize(QtCore.QSize(250, 1000))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout_26 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_26.setObjectName("gridLayout_26")
        self.tabWidget_3 = QtWidgets.QTabWidget(self.frame_4)
        self.tabWidget_3.setObjectName("tabWidget_3")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.gridLayout_29 = QtWidgets.QGridLayout(self.tab_6)
        self.gridLayout_29.setObjectName("gridLayout_29")
        self.gridLayout_28 = QtWidgets.QGridLayout()
        self.gridLayout_28.setObjectName("gridLayout_28")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.gridLayout_25 = QtWidgets.QGridLayout()
        self.gridLayout_25.setSpacing(0)
        self.gridLayout_25.setObjectName("gridLayout_25")
        self.label_33 = QtWidgets.QLabel(self.tab_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_33.sizePolicy().hasHeightForWidth())
        self.label_33.setSizePolicy(sizePolicy)
        self.label_33.setMinimumSize(QtCore.QSize(80, 0))
        self.label_33.setStyleSheet("background-color: rgb(197, 216, 255);")
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.gridLayout_25.addWidget(self.label_33, 0, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_4.setMaximumSize(QtCore.QSize(30, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("background-color: rgb(151, 191, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_25.addWidget(self.pushButton_4, 0, 1, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_5.setMaximumSize(QtCore.QSize(30, 30))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("background-color: rgb(151, 191, 255);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout_25.addWidget(self.pushButton_5, 0, 2, 1, 1)
        self.verticalLayout_13.addLayout(self.gridLayout_25)
        self.label_28 = QtWidgets.QLabel(self.tab_6)
        self.label_28.setObjectName("label_28")
        self.verticalLayout_13.addWidget(self.label_28)
        self.comboBox_2 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_2.setObjectName("comboBox_2")
        self.verticalLayout_13.addWidget(self.comboBox_2)
        self.label_43 = QtWidgets.QLabel(self.tab_6)
        self.label_43.setObjectName("label_43")
        self.verticalLayout_13.addWidget(self.label_43)
        self.comboBox_6 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_6.setObjectName("comboBox_6")
        self.verticalLayout_13.addWidget(self.comboBox_6)
        self.label_44 = QtWidgets.QLabel(self.tab_6)
        self.label_44.setObjectName("label_44")
        self.verticalLayout_13.addWidget(self.label_44)
        self.comboBox_7 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_7.setObjectName("comboBox_7")
        self.verticalLayout_13.addWidget(self.comboBox_7)
        self.label_29 = QtWidgets.QLabel(self.tab_6)
        self.label_29.setObjectName("label_29")
        self.verticalLayout_13.addWidget(self.label_29)
        self.comboBox_3 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_3.setObjectName("comboBox_3")
        self.verticalLayout_13.addWidget(self.comboBox_3)
        self.label_37 = QtWidgets.QLabel(self.tab_6)
        self.label_37.setObjectName("label_37")
        self.verticalLayout_13.addWidget(self.label_37)
        self.label_38 = QtWidgets.QLabel(self.tab_6)
        self.label_38.setObjectName("label_38")
        self.verticalLayout_13.addWidget(self.label_38)
        self.label_39 = QtWidgets.QLabel(self.tab_6)
        self.label_39.setObjectName("label_39")
        self.verticalLayout_13.addWidget(self.label_39)
        self.gridLayout_28.addLayout(self.verticalLayout_13, 0, 0, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(85, 17, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_28.addItem(spacerItem8, 1, 0, 1, 1)
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.label_36 = QtWidgets.QLabel(self.tab_6)
        self.label_36.setStyleSheet("background-color: rgb(197, 216, 255);")
        self.label_36.setAlignment(QtCore.Qt.AlignCenter)
        self.label_36.setObjectName("label_36")
        self.verticalLayout_14.addWidget(self.label_36)
        self.label_34 = QtWidgets.QLabel(self.tab_6)
        self.label_34.setObjectName("label_34")
        self.verticalLayout_14.addWidget(self.label_34)
        self.comboBox_4 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_4.setObjectName("comboBox_4")
        self.verticalLayout_14.addWidget(self.comboBox_4)
        self.label_35 = QtWidgets.QLabel(self.tab_6)
        self.label_35.setObjectName("label_35")
        self.verticalLayout_14.addWidget(self.label_35)
        self.comboBox_5 = QtWidgets.QComboBox(self.tab_6)
        self.comboBox_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_5.setObjectName("comboBox_5")
        self.verticalLayout_14.addWidget(self.comboBox_5)
        self.label_42 = QtWidgets.QLabel(self.tab_6)
        self.label_42.setObjectName("label_42")
        self.verticalLayout_14.addWidget(self.label_42)
        self.label_40 = QtWidgets.QLabel(self.tab_6)
        self.label_40.setObjectName("label_40")
        self.verticalLayout_14.addWidget(self.label_40)
        self.label_41 = QtWidgets.QLabel(self.tab_6)
        self.label_41.setObjectName("label_41")
        self.verticalLayout_14.addWidget(self.label_41)
        self.gridLayout_28.addLayout(self.verticalLayout_14, 2, 0, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(17, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_28.addItem(spacerItem9, 3, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.tab_6)
        self.pushButton_2.setStyleSheet("background-color: rgb(217, 234, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_28.addWidget(self.pushButton_2, 4, 0, 1, 1)
        self.gridLayout_29.addLayout(self.gridLayout_28, 0, 0, 1, 1)
        self.tabWidget_3.addTab(self.tab_6, "")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.tabWidget_3.addTab(self.tab_7, "")
        self.gridLayout_26.addWidget(self.tabWidget_3, 0, 0, 1, 1)
        self.gridLayout_30.addWidget(self.frame_4, 0, 0, 1, 1)
        self.gridLayout_27 = QtWidgets.QGridLayout()
        self.gridLayout_27.setObjectName("gridLayout_27")
        self.comboBox_8 = QtWidgets.QComboBox(self.tab_4)
        self.comboBox_8.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_8.setObjectName("comboBox_8")
        self.gridLayout_27.addWidget(self.comboBox_8, 0, 0, 1, 2)
        self.widget_2 = QtWidgets.QWidget(self.tab_4)
        self.widget_2.setSizeIncrement(QtCore.QSize(0, 0))
        self.widget_2.setStyleSheet("background-color: rgb(245, 245, 245);\n"
                                    "background-color: rgb(255, 255, 255);")
        self.widget_2.setObjectName("widget_2")
        self.gridLayout_27.addWidget(self.widget_2, 1, 0, 1, 1)
        self.widget_3 = QtWidgets.QWidget(self.tab_4)
        self.widget_3.setStyleSheet("\n"
                                    "background-color: rgb(255, 255, 255);")
        self.widget_3.setObjectName("widget_3")
        self.gridLayout_27.addWidget(self.widget_3, 1, 1, 1, 1)
        self.gridLayout_30.addLayout(self.gridLayout_27, 0, 1, 1, 1)
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.gridLayout_18 = QtWidgets.QGridLayout(self.tab_3)
        self.gridLayout_18.setObjectName("gridLayout_18")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.comboBox_tipo_ensayo = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_tipo_ensayo.setEnabled(True)
        self.comboBox_tipo_ensayo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_tipo_ensayo.setObjectName("comboBox_tipo_ensayo")
        self.comboBox_tipo_ensayo.addItem("")
        self.comboBox_tipo_ensayo.addItem("")
        self.comboBox_tipo_ensayo.addItem("")
        self.verticalLayout_11.addWidget(self.comboBox_tipo_ensayo)
        self.frame_2 = QtWidgets.QFrame(self.tab_3)
        self.frame_2.setEnabled(True)
        self.frame_2.setMinimumSize(QtCore.QSize(640, 530))
        self.frame_2.setMaximumSize(QtCore.QSize(750, 16777215))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.gridLayout_12 = QtWidgets.QGridLayout()
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        self.label_7.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.gridLayout_12.addWidget(self.label_7, 0, 0, 1, 3)
        self.gridLayout_10 = QtWidgets.QGridLayout()
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setObjectName("label_6")
        self.gridLayout_10.addWidget(self.label_6, 0, 0, 1, 3)
        self.lineEdit_vel_control_fuerza = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_vel_control_fuerza.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_vel_control_fuerza.setClearButtonEnabled(True)
        self.lineEdit_vel_control_fuerza.setObjectName("lineEdit_vel_control_fuerza")
        self.gridLayout_10.addWidget(self.lineEdit_vel_control_fuerza, 0, 3, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.frame_2)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout_10.addWidget(self.label_8, 1, 0, 2, 1)
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setObjectName("label_9")
        self.gridLayout_10.addWidget(self.label_9, 1, 1, 1, 2)
        self.lineEdit_vel_control_deform_carga = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_vel_control_deform_carga.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_vel_control_deform_carga.setInputMask("")
        self.lineEdit_vel_control_deform_carga.setText("")
        self.lineEdit_vel_control_deform_carga.setClearButtonEnabled(True)
        self.lineEdit_vel_control_deform_carga.setObjectName("lineEdit_vel_control_deform_carga")
        self.gridLayout_10.addWidget(self.lineEdit_vel_control_deform_carga, 1, 3, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setObjectName("label_10")
        self.gridLayout_10.addWidget(self.label_10, 2, 1, 1, 2)
        self.lineEdit_vel_control_def_descarga = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_vel_control_def_descarga.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_vel_control_def_descarga.setClearButtonEnabled(True)
        self.lineEdit_vel_control_def_descarga.setObjectName("lineEdit_vel_control_def_descarga")
        self.gridLayout_10.addWidget(self.lineEdit_vel_control_def_descarga, 2, 3, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setObjectName("label_11")
        self.gridLayout_10.addWidget(self.label_11, 3, 0, 1, 2)
        self.comboBox_tipo_de_control = QtWidgets.QComboBox(self.frame_2)
        self.comboBox_tipo_de_control.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_tipo_de_control.setObjectName("comboBox_tipo_de_control")
        self.comboBox_tipo_de_control.addItem("")
        self.comboBox_tipo_de_control.addItem("")
        self.gridLayout_10.addWidget(self.comboBox_tipo_de_control, 3, 2, 1, 2)
        self.gridLayout_12.addLayout(self.gridLayout_10, 1, 0, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.frame_2)
        self.label_12.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.gridLayout_12.addWidget(self.label_12, 1, 1, 1, 1)
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.lineEdit_Rel_LD = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Rel_LD.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Rel_LD.setText("")
        self.lineEdit_Rel_LD.setClearButtonEnabled(True)
        self.lineEdit_Rel_LD.setObjectName("lineEdit_Rel_LD")
        self.gridLayout_9.addWidget(self.lineEdit_Rel_LD, 3, 1, 1, 1)
        self.label_17 = QtWidgets.QLabel(self.frame_2)
        self.label_17.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.gridLayout_9.addWidget(self.label_17, 3, 0, 1, 1)
        self.lineEdit_diametro_muestra = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_diametro_muestra.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_diametro_muestra.setClearButtonEnabled(True)
        self.lineEdit_diametro_muestra.setObjectName("lineEdit_diametro_muestra")
        self.gridLayout_9.addWidget(self.lineEdit_diametro_muestra, 0, 1, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.frame_2)
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.gridLayout_9.addWidget(self.label_14, 1, 0, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.frame_2)
        self.label_15.setAlignment(QtCore.Qt.AlignCenter)
        self.label_15.setObjectName("label_15")
        self.gridLayout_9.addWidget(self.label_15, 2, 0, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.frame_2)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.gridLayout_9.addWidget(self.label_13, 0, 0, 1, 1)
        self.lineEdit_pesoMuestra = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_pesoMuestra.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_pesoMuestra.setClearButtonEnabled(True)
        self.lineEdit_pesoMuestra.setObjectName("lineEdit_pesoMuestra")
        self.gridLayout_9.addWidget(self.lineEdit_pesoMuestra, 2, 1, 1, 1)
        self.lineEdit_Largo_muestra = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Largo_muestra.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Largo_muestra.setClearButtonEnabled(True)
        self.lineEdit_Largo_muestra.setObjectName("lineEdit_Largo_muestra")
        self.gridLayout_9.addWidget(self.lineEdit_Largo_muestra, 1, 1, 1, 1)
        self.gridLayout_12.addLayout(self.gridLayout_9, 1, 2, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.frame_2)
        self.label_16.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.gridLayout_12.addWidget(self.label_16, 2, 0, 1, 3)
        self.gridLayout_11 = QtWidgets.QGridLayout()
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.label_18 = QtWidgets.QLabel(self.frame_2)
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.gridLayout_11.addWidget(self.label_18, 0, 0, 1, 1)
        self.lineEdit_CargMax = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_CargMax.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_CargMax.setText("")
        self.lineEdit_CargMax.setClearButtonEnabled(True)
        self.lineEdit_CargMax.setObjectName("lineEdit_CargMax")
        self.gridLayout_11.addWidget(self.lineEdit_CargMax, 0, 1, 1, 1)
        self.label_19 = QtWidgets.QLabel(self.frame_2)
        self.label_19.setAlignment(QtCore.Qt.AlignCenter)
        self.label_19.setObjectName("label_19")
        self.gridLayout_11.addWidget(self.label_19, 1, 0, 1, 1)
        self.lineEdit_ResMax = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_ResMax.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_ResMax.setText("")
        self.lineEdit_ResMax.setClearButtonEnabled(True)
        self.lineEdit_ResMax.setObjectName("lineEdit_ResMax")
        self.gridLayout_11.addWidget(self.lineEdit_ResMax, 1, 1, 1, 1)
        self.label_20 = QtWidgets.QLabel(self.frame_2)
        self.label_20.setAlignment(QtCore.Qt.AlignCenter)
        self.label_20.setObjectName("label_20")
        self.gridLayout_11.addWidget(self.label_20, 2, 0, 1, 1)
        self.lineEdit_ResMaxNorm = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_ResMaxNorm.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_ResMaxNorm.setClearButtonEnabled(True)
        self.lineEdit_ResMaxNorm.setObjectName("lineEdit_ResMaxNorm")
        self.gridLayout_11.addWidget(self.lineEdit_ResMaxNorm, 2, 1, 1, 1)
        self.gridLayout_12.addLayout(self.gridLayout_11, 3, 0, 1, 1)
        self.label_21 = QtWidgets.QLabel(self.frame_2)
        self.label_21.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.label_21.setText("")
        self.label_21.setObjectName("label_21")
        self.gridLayout_12.addWidget(self.label_21, 3, 1, 1, 1)
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.label_23 = QtWidgets.QLabel(self.frame_2)
        self.label_23.setAlignment(QtCore.Qt.AlignCenter)
        self.label_23.setObjectName("label_23")
        self.gridLayout_8.addWidget(self.label_23, 0, 0, 1, 1)
        self.lineEdit_Duracion_PrePeak = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Duracion_PrePeak.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Duracion_PrePeak.setText("")
        self.lineEdit_Duracion_PrePeak.setClearButtonEnabled(True)
        self.lineEdit_Duracion_PrePeak.setObjectName("lineEdit_Duracion_PrePeak")
        self.gridLayout_8.addWidget(self.lineEdit_Duracion_PrePeak, 0, 1, 1, 1)
        self.label_22 = QtWidgets.QLabel(self.frame_2)
        self.label_22.setAlignment(QtCore.Qt.AlignCenter)
        self.label_22.setObjectName("label_22")
        self.gridLayout_8.addWidget(self.label_22, 1, 0, 1, 1)
        self.lineEdit_Duracion_PostPeak = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Duracion_PostPeak.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Duracion_PostPeak.setText("")
        self.lineEdit_Duracion_PostPeak.setClearButtonEnabled(True)
        self.lineEdit_Duracion_PostPeak.setObjectName("lineEdit_Duracion_PostPeak")
        self.gridLayout_8.addWidget(self.lineEdit_Duracion_PostPeak, 1, 1, 1, 1)
        self.label_24 = QtWidgets.QLabel(self.frame_2)
        self.label_24.setAlignment(QtCore.Qt.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.gridLayout_8.addWidget(self.label_24, 2, 0, 1, 1)
        self.lineEdit_Duracion_Ensayo = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Duracion_Ensayo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Duracion_Ensayo.setText("")
        self.lineEdit_Duracion_Ensayo.setClearButtonEnabled(True)
        self.lineEdit_Duracion_Ensayo.setObjectName("lineEdit_Duracion_Ensayo")
        self.gridLayout_8.addWidget(self.lineEdit_Duracion_Ensayo, 2, 1, 1, 1)
        self.gridLayout_12.addLayout(self.gridLayout_8, 3, 2, 1, 1)
        self.label_25 = QtWidgets.QLabel(self.frame_2)
        self.label_25.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.label_25.setText("")
        self.label_25.setObjectName("label_25")
        self.gridLayout_12.addWidget(self.label_25, 4, 0, 2, 3)
        self.label_26 = QtWidgets.QLabel(self.frame_2)
        self.label_26.setStyleSheet("background-color: rgb(235, 235, 235);")
        self.label_26.setText("")
        self.label_26.setObjectName("label_26")
        self.gridLayout_12.addWidget(self.label_26, 5, 1, 2, 1)
        self.tableWidget_modulos_elast = QtWidgets.QTableWidget(self.frame_2)
        self.tableWidget_modulos_elast.setStyleSheet("background-color: rgb(239, 250, 255);")
        self.tableWidget_modulos_elast.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tableWidget_modulos_elast.setObjectName("tableWidget_modulos_elast")
        self.tableWidget_modulos_elast.setColumnCount(2)
        self.tableWidget_modulos_elast.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_modulos_elast.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_modulos_elast.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_modulos_elast.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_modulos_elast.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_modulos_elast.setHorizontalHeaderItem(1, item)
        self.gridLayout_12.addWidget(self.tableWidget_modulos_elast, 6, 0, 1, 1)
        self.gridLayout_7 = QtWidgets.QGridLayout()
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.label_32 = QtWidgets.QLabel(self.frame_2)
        self.label_32.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.gridLayout_7.addWidget(self.label_32, 0, 0, 1, 1)
        self.lineEdit_Comienzo_de_Ciclos = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Comienzo_de_Ciclos.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Comienzo_de_Ciclos.setText("")
        self.lineEdit_Comienzo_de_Ciclos.setClearButtonEnabled(True)
        self.lineEdit_Comienzo_de_Ciclos.setObjectName("lineEdit_Comienzo_de_Ciclos")
        self.gridLayout_7.addWidget(self.lineEdit_Comienzo_de_Ciclos, 0, 1, 1, 2)
        self.label_27 = QtWidgets.QLabel(self.frame_2)
        self.label_27.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.gridLayout_7.addWidget(self.label_27, 1, 0, 1, 1)
        self.lineEdit_Numero_Ciclos = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Numero_Ciclos.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Numero_Ciclos.setText("")
        self.lineEdit_Numero_Ciclos.setClearButtonEnabled(True)
        self.lineEdit_Numero_Ciclos.setObjectName("lineEdit_Numero_Ciclos")
        self.gridLayout_7.addWidget(self.lineEdit_Numero_Ciclos, 1, 1, 1, 2)
        self.label_30 = QtWidgets.QLabel(self.frame_2)
        self.label_30.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.gridLayout_7.addWidget(self.label_30, 2, 0, 1, 1)
        self.label_31 = QtWidgets.QLabel(self.frame_2)
        self.label_31.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.gridLayout_7.addWidget(self.label_31, 3, 0, 1, 1)
        self.lineEdit_Carga_por_Ciclo = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Carga_por_Ciclo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Carga_por_Ciclo.setText("")
        self.lineEdit_Carga_por_Ciclo.setClearButtonEnabled(True)
        self.lineEdit_Carga_por_Ciclo.setObjectName("lineEdit_Carga_por_Ciclo")
        self.gridLayout_7.addWidget(self.lineEdit_Carga_por_Ciclo, 2, 1, 1, 2)
        self.lineEdit_Descarga_Por_Ciclo = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Descarga_Por_Ciclo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Descarga_Por_Ciclo.setText("")
        self.lineEdit_Descarga_Por_Ciclo.setClearButtonEnabled(True)
        self.lineEdit_Descarga_Por_Ciclo.setObjectName("lineEdit_Descarga_Por_Ciclo")
        self.gridLayout_7.addWidget(self.lineEdit_Descarga_Por_Ciclo, 3, 1, 1, 2)
        self.gridLayout_12.addLayout(self.gridLayout_7, 6, 2, 1, 1)
        self.gridLayout_17.addLayout(self.gridLayout_12, 1, 0, 1, 1)
        self.gridLayout_13 = QtWidgets.QGridLayout()
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        self.label_2.setObjectName("label_2")
        self.gridLayout_13.addWidget(self.label_2, 0, 0, 1, 1)
        self.lineEdit_Proyecto = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_Proyecto.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_Proyecto.setClearButtonEnabled(True)
        self.lineEdit_Proyecto.setObjectName("lineEdit_Proyecto")
        self.gridLayout_13.addWidget(self.lineEdit_Proyecto, 0, 1, 1, 2)
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setObjectName("label_3")
        self.gridLayout_13.addWidget(self.label_3, 0, 3, 1, 1)
        self.lineEdit_codigo_muestra = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_codigo_muestra.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_codigo_muestra.setClearButtonEnabled(True)
        self.lineEdit_codigo_muestra.setObjectName("lineEdit_codigo_muestra")
        self.gridLayout_13.addWidget(self.lineEdit_codigo_muestra, 0, 4, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        self.label_5.setObjectName("label_5")
        self.gridLayout_13.addWidget(self.label_5, 0, 5, 1, 1)
        self.lineEdit_litologia_2 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_litologia_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_litologia_2.setText("")
        self.lineEdit_litologia_2.setClearButtonEnabled(True)
        self.lineEdit_litologia_2.setObjectName("lineEdit_litologia_2")
        self.gridLayout_13.addWidget(self.lineEdit_litologia_2, 0, 6, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout_13.addWidget(self.label_4, 1, 0, 1, 2)
        self.plainText_Objetivo_y_Comentarios = QtWidgets.QPlainTextEdit(self.frame_2)
        self.plainText_Objetivo_y_Comentarios.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.plainText_Objetivo_y_Comentarios.setObjectName("plainText_Objetivo_y_Comentarios")
        self.gridLayout_13.addWidget(self.plainText_Objetivo_y_Comentarios, 1, 2, 1, 5)
        self.gridLayout_17.addLayout(self.gridLayout_13, 0, 0, 1, 1)
        self.verticalLayout_11.addWidget(self.frame_2)
        self.gridLayout_18.addLayout(self.verticalLayout_11, 0, 0, 1, 1)
        self.tabWidget_2 = QtWidgets.QTabWidget(self.tab_3)
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tab_41 = QtWidgets.QWidget()
        self.tab_41.setObjectName("tab_41")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.tab_41)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.gridLayout_14 = QtWidgets.QGridLayout()
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.pushButton_imagen_previa = QtWidgets.QPushButton(self.tab_41)
        self.pushButton_imagen_previa.setStyleSheet("border-bottom-color: rgb(0, 0, 0);\n"
                                                    "border-color: rgb(0, 0, 0);\n"
                                                    "border-top-color: rgb(0, 0, 0);\n"
                                                    "\n"
                                                    "background-color: rgb(156, 201, 255);")
        self.pushButton_imagen_previa.setObjectName("pushButton_imagen_previa")
        self.gridLayout_14.addWidget(self.pushButton_imagen_previa, 0, 0, 1, 1)
        self.label_imagen_posterior = QtWidgets.QLabel(self.tab_41)
        self.label_imagen_posterior.setMinimumSize(QtCore.QSize(285, 285))
        self.label_imagen_posterior.setMaximumSize(QtCore.QSize(285, 285))
        self.label_imagen_posterior.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_imagen_posterior.setAlignment(QtCore.Qt.AlignCenter)
        self.label_imagen_posterior.setObjectName("label_imagen_posterior")
        self.gridLayout_14.addWidget(self.label_imagen_posterior, 2, 1, 1, 1)
        self.label_imagen_previa = QtWidgets.QLabel(self.tab_41)
        self.label_imagen_previa.setMinimumSize(QtCore.QSize(285, 285))
        self.label_imagen_previa.setMaximumSize(QtCore.QSize(285, 285))
        self.label_imagen_previa.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_imagen_previa.setAlignment(QtCore.Qt.AlignCenter)
        self.label_imagen_previa.setObjectName("label_imagen_previa")
        self.gridLayout_14.addWidget(self.label_imagen_previa, 2, 0, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_14.addItem(spacerItem10, 1, 0, 1, 1)
        self.pushButton_imagen_posterior = QtWidgets.QPushButton(self.tab_41)
        self.pushButton_imagen_posterior.setStyleSheet("background-color: rgb(156, 201, 255);")
        self.pushButton_imagen_posterior.setObjectName("pushButton_imagen_posterior")
        self.gridLayout_14.addWidget(self.pushButton_imagen_posterior, 0, 1, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_14.addItem(spacerItem11, 1, 1, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_14.addItem(spacerItem12, 3, 0, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_14.addItem(spacerItem13, 3, 1, 1, 1)
        self.gridLayout_15.addLayout(self.gridLayout_14, 0, 0, 1, 1)
        self.tabWidget_2.addTab(self.tab_41, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.gridLayout_16 = QtWidgets.QGridLayout(self.tab_5)
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.widget = QtWidgets.QWidget(self.tab_5)
        self.widget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.widget.setObjectName("widget")
        self.gridLayout_16.addWidget(self.widget, 0, 0, 1, 1)
        self.tabWidget_2.addTab(self.tab_5, "")
        self.gridLayout_18.addWidget(self.tabWidget_2, 0, 1, 1, 1)
        self.tabWidget.addTab(self.tab_3, "")
        self.gridLayout_20.addWidget(self.tabWidget, 1, 1, 1, 3)
        ModulosElasticos.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ModulosElasticos)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1608, 21))
        self.menubar.setObjectName("menubar")
        self.menuSrchivo = QtWidgets.QMenu(self.menubar)
        self.menuSrchivo.setObjectName("menuSrchivo")
        self.menuExportar = QtWidgets.QMenu(self.menuSrchivo)
        self.menuExportar.setObjectName("menuExportar")
        self.menuAcerca_de = QtWidgets.QMenu(self.menubar)
        self.menuAcerca_de.setObjectName("menuAcerca_de")
        ModulosElasticos.setMenuBar(self.menubar)
        self.actionImportar = QtWidgets.QAction(ModulosElasticos)
        self.actionImportar.setObjectName("actionImportar")
        self.actionExportar_todo_a_directorio = QtWidgets.QAction(ModulosElasticos)
        self.actionExportar_todo_a_directorio.setObjectName("actionExportar_todo_a_directorio")
        self.actionExportar_archivo_nico = QtWidgets.QAction(ModulosElasticos)
        self.actionExportar_archivo_nico.setObjectName("actionExportar_archivo_nico")
        self.menuExportar.addAction(self.actionExportar_todo_a_directorio)
        self.menuExportar.addAction(self.actionExportar_archivo_nico)
        self.menuSrchivo.addAction(self.actionImportar)
        self.menuSrchivo.addSeparator()
        self.menuSrchivo.addAction(self.menuExportar.menuAction())
        self.menubar.addAction(self.menuSrchivo.menuAction())
        self.menubar.addAction(self.menuAcerca_de.menuAction())

        self.retranslateUi(ModulosElasticos)
        self.toolBox.setCurrentIndex(3)
        self.tabWidget.setCurrentIndex(2)
        self.tabWidget_3.setCurrentIndex(0)
        self.comboBox_tipo_ensayo.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(ModulosElasticos)
        ModulosElasticos.setTabOrder(self.button_importarArchivo, self.button_modulosElasticos)
        ModulosElasticos.setTabOrder(self.button_modulosElasticos, self.button_guardar)
        ModulosElasticos.setTabOrder(self.button_guardar, self.lineEdit_Proyecto)
        ModulosElasticos.setTabOrder(self.lineEdit_Proyecto, self.lineEdit_codigo_muestra)
        ModulosElasticos.setTabOrder(self.lineEdit_codigo_muestra, self.lineEdit_litologia_2)
        ModulosElasticos.setTabOrder(self.lineEdit_litologia_2, self.plainText_Objetivo_y_Comentarios)
        ModulosElasticos.setTabOrder(self.plainText_Objetivo_y_Comentarios, self.lineEdit_vel_control_fuerza)
        ModulosElasticos.setTabOrder(self.lineEdit_vel_control_fuerza, self.lineEdit_vel_control_deform_carga)
        ModulosElasticos.setTabOrder(self.lineEdit_vel_control_deform_carga, self.lineEdit_vel_control_def_descarga)
        ModulosElasticos.setTabOrder(self.lineEdit_vel_control_def_descarga, self.comboBox_tipo_de_control)
        ModulosElasticos.setTabOrder(self.comboBox_tipo_de_control, self.lineEdit_diametro_muestra)
        ModulosElasticos.setTabOrder(self.lineEdit_diametro_muestra, self.lineEdit_Largo_muestra)
        ModulosElasticos.setTabOrder(self.lineEdit_Largo_muestra, self.lineEdit_pesoMuestra)
        ModulosElasticos.setTabOrder(self.lineEdit_pesoMuestra, self.lineEdit_Rel_LD)
        ModulosElasticos.setTabOrder(self.lineEdit_Rel_LD, self.lineEdit_CargMax)
        ModulosElasticos.setTabOrder(self.lineEdit_CargMax, self.lineEdit_ResMax)
        ModulosElasticos.setTabOrder(self.lineEdit_ResMax, self.lineEdit_ResMaxNorm)
        ModulosElasticos.setTabOrder(self.lineEdit_ResMaxNorm, self.lineEdit_Duracion_PrePeak)
        ModulosElasticos.setTabOrder(self.lineEdit_Duracion_PrePeak, self.lineEdit_Duracion_PostPeak)
        ModulosElasticos.setTabOrder(self.lineEdit_Duracion_PostPeak, self.lineEdit_Duracion_Ensayo)
        ModulosElasticos.setTabOrder(self.lineEdit_Duracion_Ensayo, self.lineEdit_Comienzo_de_Ciclos)
        ModulosElasticos.setTabOrder(self.lineEdit_Comienzo_de_Ciclos, self.lineEdit_Numero_Ciclos)
        ModulosElasticos.setTabOrder(self.lineEdit_Numero_Ciclos, self.lineEdit_Carga_por_Ciclo)
        ModulosElasticos.setTabOrder(self.lineEdit_Carga_por_Ciclo, self.lineEdit_Descarga_Por_Ciclo)
        ModulosElasticos.setTabOrder(self.lineEdit_Descarga_Por_Ciclo, self.checkBox_elemento7)
        ModulosElasticos.setTabOrder(self.checkBox_elemento7, self.checkBox_elemento8)
        ModulosElasticos.setTabOrder(self.checkBox_elemento8, self.checkBox_elemento9)
        ModulosElasticos.setTabOrder(self.checkBox_elemento9, self.checkBox_elemento10)
        ModulosElasticos.setTabOrder(self.checkBox_elemento10, self.checkBox_elemento11)
        ModulosElasticos.setTabOrder(self.checkBox_elemento11, self.checkBox_elemento12)
        ModulosElasticos.setTabOrder(self.checkBox_elemento12, self.checkBox_elemento13)
        ModulosElasticos.setTabOrder(self.checkBox_elemento13, self.checkBox_elemento14)
        ModulosElasticos.setTabOrder(self.checkBox_elemento14, self.checkBox_elemento15)
        ModulosElasticos.setTabOrder(self.checkBox_elemento15, self.checkBox_elemento16)
        ModulosElasticos.setTabOrder(self.checkBox_elemento16, self.checkBox_elemento17)
        ModulosElasticos.setTabOrder(self.checkBox_elemento17, self.checkBox_elemento18)
        ModulosElasticos.setTabOrder(self.checkBox_elemento18, self.checkBox_elemento19)
        ModulosElasticos.setTabOrder(self.checkBox_elemento19, self.checkBox_elemento20)
        ModulosElasticos.setTabOrder(self.checkBox_elemento20, self.checkBox_elemento21)
        ModulosElasticos.setTabOrder(self.checkBox_elemento21, self.checkBox_elemento22)
        ModulosElasticos.setTabOrder(self.checkBox_elemento22, self.checkBox_elemento23)
        ModulosElasticos.setTabOrder(self.checkBox_elemento23, self.checkBox_elemento24)
        ModulosElasticos.setTabOrder(self.checkBox_elemento24, self.button_agregar_a_tabla)
        ModulosElasticos.setTabOrder(self.button_agregar_a_tabla, self.pushButton)
        ModulosElasticos.setTabOrder(self.pushButton, self.comboBox)
        ModulosElasticos.setTabOrder(self.comboBox, self.lineEdit_7)
        ModulosElasticos.setTabOrder(self.lineEdit_7, self.pushButton_3)
        ModulosElasticos.setTabOrder(self.pushButton_3, self.tabWidget)
        ModulosElasticos.setTabOrder(self.tabWidget, self.tableView_Datos)
        ModulosElasticos.setTabOrder(self.tableView_Datos, self.tableView_Datos_completos)
        ModulosElasticos.setTabOrder(self.tableView_Datos_completos, self.checkBox_elemento1)
        ModulosElasticos.setTabOrder(self.checkBox_elemento1, self.checkBox_elemento2)
        ModulosElasticos.setTabOrder(self.checkBox_elemento2, self.tableWidget_modulos_elast)
        ModulosElasticos.setTabOrder(self.tableWidget_modulos_elast, self.checkBox_elemento4)
        ModulosElasticos.setTabOrder(self.checkBox_elemento4, self.tabWidget_2)
        ModulosElasticos.setTabOrder(self.tabWidget_2, self.pushButton_imagen_previa)
        ModulosElasticos.setTabOrder(self.pushButton_imagen_previa, self.pushButton_imagen_posterior)
        ModulosElasticos.setTabOrder(self.pushButton_imagen_posterior, self.comboBox_tipo_ensayo)
        ModulosElasticos.setTabOrder(self.comboBox_tipo_ensayo, self.checkBox_elemento5)
        ModulosElasticos.setTabOrder(self.checkBox_elemento5, self.checkBox_elemento6)
        ModulosElasticos.setTabOrder(self.checkBox_elemento6, self.checkBox_elemento3)
        self.chechboxes()

    def retranslateUi(self, ModulosElasticos):
        _translate = QtCore.QCoreApplication.translate
        ModulosElasticos.setWindowTitle(_translate("ModulosElasticos", "Ensayos Post Peak"))
        self.button_importarArchivo.setText(_translate("ModulosElasticos", "Importar"))
        self.button_modulosElasticos.setText(_translate("ModulosElasticos", "M. El√°sticos"))
        self.button_guardar.setText(_translate("ModulosElasticos", "Guardar"))
        self.checkBox_elemento1.setText(_translate("ModulosElasticos", "Elemento 1"))
        self.checkBox_elemento2.setText(_translate("ModulosElasticos", "Elemento 2"))
        self.checkBox_elemento3.setText(_translate("ModulosElasticos", "Elemento 3"))
        self.checkBox_elemento4.setText(_translate("ModulosElasticos", "Elemento 4"))
        self.checkBox_elemento5.setText(_translate("ModulosElasticos", "Elemento 5"))
        self.checkBox_elemento6.setText(_translate("ModulosElasticos", "Elemento 6"))
        self.checkBox_elemento6_2.setText(_translate("ModulosElasticos", "Elemento 7"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_def_axial_SG),
                                 _translate("ModulosElasticos", "Deformaci√≥n Axial (Strain Gauge)"))
        self.checkBox_elemento7.setText(_translate("ModulosElasticos", "Elemento 1"))
        self.checkBox_elemento8.setText(_translate("ModulosElasticos", "Elemento 2"))
        self.checkBox_elemento9.setText(_translate("ModulosElasticos", "Elemento 3"))
        self.checkBox_elemento10.setText(_translate("ModulosElasticos", "Elemento 4"))
        self.checkBox_elemento11.setText(_translate("ModulosElasticos", "Elemento 5"))
        self.checkBox_elemento12.setText(_translate("ModulosElasticos", "Elemento 6"))
        self.checkBox_elemento12_2.setText(_translate("ModulosElasticos", "Elemento 7"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_def_diam_SG),
                                 _translate("ModulosElasticos", "Deformaci√≥n Diametral (Strain Gauge)"))
        self.checkBox_elemento13.setText(_translate("ModulosElasticos", "Elemento 1"))
        self.checkBox_elemento14.setText(_translate("ModulosElasticos", "Elemento 2"))
        self.checkBox_elemento15.setText(_translate("ModulosElasticos", "Elemento 3"))
        self.checkBox_elemento16.setText(_translate("ModulosElasticos", "Elemento 4"))
        self.checkBox_elemento17.setText(_translate("ModulosElasticos", "Elemento 5"))
        self.checkBox_elemento18.setText(_translate("ModulosElasticos", "Elemento 6"))
        self.checkBox_elemento18_2.setText(_translate("ModulosElasticos", "Elemento 7"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_def_axial_PP),
                                 _translate("ModulosElasticos", "Deformaci√≥n Axial (LVDT)"))
        self.checkBox_elemento19.setText(_translate("ModulosElasticos", "Elemento 1"))
        self.checkBox_elemento20.setText(_translate("ModulosElasticos", "Elemento 2"))
        self.checkBox_elemento21.setText(_translate("ModulosElasticos", "Elemento 3"))
        self.checkBox_elemento22.setText(_translate("ModulosElasticos", "Elemento 4"))
        self.checkBox_elemento23.setText(_translate("ModulosElasticos", "Elemento 5"))
        self.checkBox_elemento24.setText(_translate("ModulosElasticos", "Elemento 6"))
        self.checkBox_elemento24_2.setText(_translate("ModulosElasticos", "Elemento 7"))
        self.toolBox.setItemText(self.toolBox.indexOf(self.page_def_diam_PP),
                                 _translate("ModulosElasticos", "Deformaci√≥n Lateral (LVDT)"))
        self.button_agregar_a_tabla.setText(_translate("ModulosElasticos", "Agregar a la Tabla"))
        self.label_titulo_filtroDatos_2.setText(_translate("ModulosElasticos", "Corregir Signo de Deformaci√≥n"))
        self.comboBox.setItemText(0, _translate("ModulosElasticos", "Def Axial"))
        self.comboBox.setItemText(1, _translate("ModulosElasticos", "Def Diametral"))
        self.pushButton.setText(_translate("ModulosElasticos", "Cambiar Signo"))
        self.pushButton_3.setText(_translate("ModulosElasticos", "Corregir"))
        self.lineEdit_7.setText(_translate("ModulosElasticos", "-1"))
        self.label_titulo_filtroDatos_3.setText(_translate("ModulosElasticos", "Cambiar Sensibilidad Correcci√≥n\n"
                                                                               " Valor estandar = -1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab),
                                  _translate("ModulosElasticos", "Tabla de la zona pre peak"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2),
                                  _translate("ModulosElasticos", "Tabla curva completa"))
        self.label_33.setText(_translate("ModulosElasticos", "Gr√°fico Principal"))
        self.pushButton_4.setText(_translate("ModulosElasticos", "+"))
        self.pushButton_5.setText(_translate("ModulosElasticos", "-"))
        self.label_28.setText(_translate("ModulosElasticos", "Elemento 1, eje X"))
        self.label_43.setText(_translate("ModulosElasticos", "Elemento 2, eje X"))
        self.label_44.setText(_translate("ModulosElasticos", "Elemento 3, eje X"))
        self.label_29.setText(_translate("ModulosElasticos", "Eje Y"))
        self.label_37.setText(_translate("ModulosElasticos", "Ecuaci√≥n de Recta"))
        self.label_38.setText(_translate("ModulosElasticos", "Y = aX+b"))
        self.label_39.setText(_translate("ModulosElasticos", "R2 = "))
        self.label_36.setText(_translate("ModulosElasticos", "Gr√°fico Secundario"))
        self.label_34.setText(_translate("ModulosElasticos", "Eje X"))
        self.label_35.setText(_translate("ModulosElasticos", "Eje Y"))
        self.label_42.setText(_translate("ModulosElasticos", "Ecuaci√≥n de Recta"))
        self.label_40.setText(_translate("ModulosElasticos", "Y = aX+b"))
        self.label_41.setText(_translate("ModulosElasticos", "R2 = "))
        self.pushButton_2.setText(_translate("ModulosElasticos", "Graficar"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_6), _translate("ModulosElasticos", "Input"))
        self.tabWidget_3.setTabText(self.tabWidget_3.indexOf(self.tab_7), _translate("ModulosElasticos", "Output"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("ModulosElasticos", "Gr√°ficos"))
        self.comboBox_tipo_ensayo.setItemText(0, _translate("ModulosElasticos", "UCS Normal"))
        self.comboBox_tipo_ensayo.setItemText(1, _translate("ModulosElasticos", "UCS Post Peak"))
        self.comboBox_tipo_ensayo.setItemText(2, _translate("ModulosElasticos", "UCS Post Peak con cargas c√≠clicas"))
        self.label_6.setText(_translate("ModulosElasticos", "Control por Fuerza - Velocidad de carga [kN/min]"))
        self.label_8.setText(_translate("ModulosElasticos", "Control en cargas c√≠clicas\n"
                                                            "Control Axial"))
        self.label_9.setText(_translate("ModulosElasticos", "Vel. carga [mm/min]"))
        self.label_10.setText(_translate("ModulosElasticos", "Vel. descarga [mm/min]"))
        self.label_11.setText(_translate("ModulosElasticos", "Tipo de control de deformaci√≥n"))
        self.comboBox_tipo_de_control.setItemText(0, _translate("ModulosElasticos", "Control Axial"))
        self.comboBox_tipo_de_control.setItemText(1, _translate("ModulosElasticos", "Control Diametral"))
        self.label_17.setText(_translate("ModulosElasticos", "Relaci√≥n L/D"))
        self.lineEdit_diametro_muestra.setText(_translate("ModulosElasticos", "63.5"))
        self.label_14.setText(_translate("ModulosElasticos", "Largo     [mm]"))
        self.label_15.setText(_translate("ModulosElasticos", "Peso        [g]"))
        self.label_13.setText(_translate("ModulosElasticos", "Di√°metro [mm]"))
        self.lineEdit_pesoMuestra.setText(_translate("ModulosElasticos", "1130"))
        self.lineEdit_Largo_muestra.setText(_translate("ModulosElasticos", "133"))
        self.label_18.setText(_translate("ModulosElasticos", "Carga M√°xima [kN]"))
        self.label_19.setText(_translate("ModulosElasticos", "Resistencia M√°xima[MPa]"))
        self.label_20.setText(_translate("ModulosElasticos", "Resistencia M√°xima normalizada a D=50 mm [MPa]"))
        self.label_23.setText(_translate("ModulosElasticos", "Duraci√≥n zona pre-peak [h]"))
        self.label_22.setText(_translate("ModulosElasticos", "Duraci√≥n post-peak [h]"))
        self.label_24.setText(_translate("ModulosElasticos", "Duraci√≥n ensayo [h]"))
        item = self.tableWidget_modulos_elast.verticalHeaderItem(0)
        item.setText(_translate("ModulosElasticos", "Modulo de Young E [GPa]"))
        item = self.tableWidget_modulos_elast.verticalHeaderItem(1)
        item.setText(_translate("ModulosElasticos", "Raz√≥n de Poisson v"))
        item = self.tableWidget_modulos_elast.verticalHeaderItem(2)
        item.setText(_translate("ModulosElasticos", "M√≥dulo Post Peak M [GPa]"))
        item = self.tableWidget_modulos_elast.horizontalHeaderItem(0)
        item.setText(_translate("ModulosElasticos", "Strain Gauges"))
        item = self.tableWidget_modulos_elast.horizontalHeaderItem(1)
        item.setText(_translate("ModulosElasticos", "Palpadores (*)"))
        self.label_32.setText(_translate("ModulosElasticos", "Comienzo de Ciclos (kN)"))
        self.label_27.setText(_translate("ModulosElasticos", "N√∫mero de ciclos"))
        self.label_30.setText(_translate("ModulosElasticos", "Carga por ciclo (kN)"))
        self.label_31.setText(_translate("ModulosElasticos", "Descarga por ciclo (kN)"))
        self.label_2.setText(_translate("ModulosElasticos", "Proyecto"))
        self.label_3.setText(_translate("ModulosElasticos", "C√≥digo Muestra"))
        self.label_5.setText(_translate("ModulosElasticos", "Litolog√≠a"))
        self.label_4.setText(_translate("ModulosElasticos", "Objetivo ensayo/\n"
                                                            "Comentarios"))
        self.pushButton_imagen_previa.setText(_translate("ModulosElasticos", "Fotograf√≠a Antes del Ensayo"))
        self.label_imagen_posterior.setText(_translate("ModulosElasticos", "TextLabel"))
        self.label_imagen_previa.setText(_translate("ModulosElasticos", "TextLabel"))
        self.pushButton_imagen_posterior.setText(_translate("ModulosElasticos", "Fotograf√≠a Despu√©s del Ensayo"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_41), _translate("ModulosElasticos", "Im√°genes"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_5), _translate("ModulosElasticos", "Gr√°fico"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("ModulosElasticos", "Reporte"))
        self.menuSrchivo.setTitle(_translate("ModulosElasticos", "Archivo"))
        self.menuExportar.setTitle(_translate("ModulosElasticos", "Exportar"))
        self.menuAcerca_de.setTitle(_translate("ModulosElasticos", "Acerca de"))
        self.actionImportar.setText(_translate("ModulosElasticos", "Importar"))
        self.actionExportar_todo_a_directorio.setText(_translate("ModulosElasticos", "Exportar todo a directorio"))
        self.actionExportar_archivo_nico.setText(_translate("ModulosElasticos", "Exportar archivo √∫nico"))

    # FUNCIONES DEL MENU INFERIOR IZQUIERDO

    def chechboxes(self):

        self.button_modulosElasticos.setVisible(False)

        self.checkbox = [self.checkBox_elemento1,
                         self.checkBox_elemento2,
                         self.checkBox_elemento3,
                         self.checkBox_elemento4,
                         self.checkBox_elemento5,
                         self.checkBox_elemento6,
                         self.checkBox_elemento6_2,
                         self.checkBox_elemento7,
                         self.checkBox_elemento8,
                         self.checkBox_elemento9,
                         self.checkBox_elemento10,
                         self.checkBox_elemento11,
                         self.checkBox_elemento12,
                         self.checkBox_elemento12_2,
                         self.checkBox_elemento13,
                         self.checkBox_elemento14,
                         self.checkBox_elemento15,
                         self.checkBox_elemento16,
                         self.checkBox_elemento17,
                         self.checkBox_elemento18,
                         self.checkBox_elemento18_2,
                         self.checkBox_elemento19,
                         self.checkBox_elemento20,
                         self.checkBox_elemento21,
                         self.checkBox_elemento22,
                         self.checkBox_elemento23,
                         self.checkBox_elemento24,
                         self.checkBox_elemento24_2]
        for i in range(0, 28):
            self.checkbox[i].setVisible(False)
        return

    def crear_checkbuttons(self, header):
        self.progressBar.setValue(0)
        self.label.setText('')

        self.restablecer_checkboxes()
        self.ocultar_checkboxes()

        self.crear_checkbuttons_SG_axial(header)
        self.crear_checkbuttons_SG_diam(header)
        self.crear_checkbuttons_PP_axial(header)
        self.crear_checkbuttons_PP_diam(header)
        return

    def ocultar_checkboxes(self):
        for i in range(0, 28):
            self.checkbox[i].setVisible(False)
        return

    def restablecer_checkboxes(self):
        for i in range(0, 28):
            self.checkbox[i].setText(f'Elemento {i + 1}')
        return

    def crear_checkbuttons_SG_axial(self, header):

        self.list_SG_axial_headers = []
        self.list_SG_axial_calculos = []

        for gauge in header:
            if findall('^GAUGE', gauge) or findall('^GAGE', gauge) or findall('^BANDA', gauge):
                self.list_SG_axial_headers.append(gauge)

        for i in range(0, len(self.list_SG_axial_headers)):
            self.checkbox[i].setVisible(True)
            self.checkbox[i].setText(f'{self.list_SG_axial_headers[i]}')
            self.list_SG_axial_calculos.append(self.checkbox[i])
        return

    def crear_checkbuttons_SG_diam(self, header):

        self.list_SG_diam_headers = []
        self.list_SG_diam_calculos = []

        for gauge in header:
            if findall('^GAUGE', gauge) or findall('^GAGE', gauge) or findall('^BANDA', gauge):
                self.list_SG_diam_headers.append(gauge)

        for i in range(0, len(self.list_SG_diam_headers)):
            self.checkbox[i + 7].setVisible(True)
            self.checkbox[i + 7].setText(f'{self.list_SG_diam_headers[i]}')
            self.list_SG_diam_calculos.append(self.checkbox[i + 7])
        return

    def crear_checkbuttons_PP_axial(self, header):

        self.list_PP_axial_headers = []
        self.list_PP_axial_calculos = []

        for palpador in header:
            if findall('^PALPADOR', palpador) or findall('^PALPADOR', palpador) or findall('^BANDA',
                                                                                           palpador) or findall('^POS',
                                                                                                                palpador):
                self.list_PP_axial_headers.append(palpador)

        for i in range(0, len(self.list_PP_axial_headers)):
            self.checkbox[i + 14].setVisible(True)
            self.checkbox[i + 14].setText(f'{self.list_PP_axial_headers[i]}')
            self.list_PP_axial_calculos.append(self.checkbox[i + 14])
        return

    def crear_checkbuttons_PP_diam(self, header):

        self.list_PP_diam_headers = []
        self.list_PP_diam_calculos = []

        for palpador in header:
            if findall('^PALPADOR', palpador) or findall('^PALPADOR', palpador) or findall('^BANDA',
                                                                                           palpador) or findall('^POS',
                                                                                                                palpador):
                self.list_PP_diam_headers.append(palpador)

        for i in range(0, len(self.list_PP_diam_headers)):
            self.checkbox[i + 21].setVisible(True)
            self.checkbox[i + 21].setText(f'{self.list_PP_diam_headers[i]}')
            self.list_PP_diam_calculos.append(self.checkbox[i + 21])
        return

    def asignar_headers(self):  # SELECCIONAR ELEMENTOS MARCADOS Y GUARDARLOS DENTRO DE UNA NUEVA VARIABLA

        self.comboBox.clear()

        self.headers_SG_axial_marked = []
        self.headers_SG_diam_marked = []
        self.headers_SG_axial_2_marked = []
        self.headers_SG_diam_2_marked = []
        self.headers_PP_axial_marked = []
        self.headers_PP_diam_marked = []

        self.def_SG_1_creada = False
        self.def_SG_2_creada = False
        self.def_PP_creada = False

        for i in range(0, len(self.list_SG_axial_calculos)):
            if self.list_SG_axial_calculos[i].checkState() == 2:
                self.headers_SG_axial_marked.append(self.list_SG_axial_headers[i])

        for i in range(0, len(self.list_SG_diam_calculos)):
            if self.list_SG_diam_calculos[i].checkState() == 2:
                self.headers_SG_diam_marked.append(self.list_SG_axial_headers[i])

        for i in range(0, len(self.list_PP_axial_calculos)):
            if self.list_PP_axial_calculos[i].checkState() == 2:
                self.headers_PP_axial_marked.append(self.list_PP_axial_headers[i])

        for i in range(0, len(self.list_PP_diam_calculos)):
            if self.list_PP_diam_calculos[i].checkState() == 2:
                self.headers_PP_diam_marked.append(self.list_PP_axial_headers[i])
        return

    # FUNCIONES DE LA TABLA DE DATOS

    def agregar_esfuerzo_a_tabla_completa(self, header):

        from math import pi

        self.tabla_completa = read_csv("recursos/tabla_original.csv",
                                       index_col=False
                                       )

        self.diametro = float(self.lineEdit_diametro_muestra.text()) if len(
            self.lineEdit_diametro_muestra.text()) > 1 else 63.5
        self.longitud = float(self.lineEdit_Largo_muestra.text()) if len(
            self.lineEdit_diametro_muestra.text()) > 1 else 133

        self.area = round((self.diametro ** 2) * pi / 4, 3)
        self.volumen = round(self.area * self.longitud, 3)

        self.peso = float(self.lineEdit_pesoMuestra.text()) if len(self.lineEdit_pesoMuestra.text()) > 0 else 1130

        self.densidad = round(self.peso / (self.area * self.longitud / 1000))

        self.relacion_LD = round(self.longitud / self.diametro, 3)

        if 'FUERZA 300' in header:
            self.tabla_completa['FUERZA 300'] = self.tabla_completa['FUERZA 300'] - self.tabla_completa['FUERZA 300'][0]
            self.fuerza = np.round(self.tabla_completa["FUERZA 300"].to_numpy(), decimals=3)
        elif "FUERZA 800" in header:
            self.tabla_completa['FUERZA 800'] = self.tabla_completa['FUERZA 800'] - self.tabla_completa['FUERZA 800'][0]
            self.fuerza = np.round(self.tabla_completa["FUERZA 800"].to_numpy(), decimals=3)

        self.esfuerzo = np.round(np.multiply(self.fuerza, (1000 / self.area)), decimals=3)
        self.tabla_completa["Esfuerzo Axial"] = self.esfuerzo.tolist()
        return

    def agregar_def_porcentuales_a_tabla(self):

        if len(self.headers_SG_axial_marked) > 0:
            for i in range(0, len(self.headers_SG_axial_marked)):
                self.tabla_completa[self.headers_SG_axial_marked[i] + " %"] = np.round(np.multiply(
                    self.tabla_completa[self.headers_SG_axial_marked[i]].to_numpy(),
                    (1 / (10 ** 4))
                ).tolist(), decimals=5)

        if len(self.headers_SG_diam_marked) > 0:
            for i in range(0, len(self.headers_SG_diam_marked)):
                self.tabla_completa[self.headers_SG_diam_marked[i] + " %"] = np.round(np.multiply(
                    self.tabla_completa[self.headers_SG_diam_marked[i]].to_numpy(),
                    (1 / (10 ** 4))
                ).tolist(), decimals=5)

        if len(self.headers_PP_axial_marked) > 0:
            for i in range(0, len(self.headers_PP_axial_marked)):
                self.tabla_completa[self.headers_PP_axial_marked[i] + " %"] = np.round(np.multiply(
                    self.tabla_completa[self.headers_PP_axial_marked[i]].to_numpy(),
                    (100 / self.longitud)
                ).tolist(), decimals=5)

        if len(self.headers_PP_diam_marked) > 0:
            for i in range(0, len(self.headers_PP_diam_marked)):
                self.tabla_completa[self.headers_PP_diam_marked[i] + " %"] = np.round(np.multiply(
                    self.tabla_completa[self.headers_PP_diam_marked[i]].to_numpy(),
                    (100 / self.diametro)
                ).tolist(), decimals=5)
        return

    def agregar_def_finales_a_tabla(self):
        if len(self.headers_SG_axial_marked) > 0:
            self.tabla_completa['Def Axial SG 1'] = self.tabla_completa[
                self.headers_SG_axial_marked[0] + " %"]
            if len(self.headers_SG_axial_marked) > 1:
                for i in range(1, len(self.headers_SG_axial_marked)):
                    self.tabla_completa['Def Axial SG 1'] = (
                            self.tabla_completa['Def Axial SG 1'] +
                            self.tabla_completa[
                                self.headers_SG_axial_marked[i] + " %"]
                    )
                self.tabla_completa['Def Axial SG 1'] = np.round(
                    self.tabla_completa['Def Axial SG 1']
                    / len(self.headers_SG_axial_marked),
                    decimals=5)

            self.def_axial_SG_inicial = self.tabla_completa['Def Axial SG 1'].to_numpy()
            self.def_SG_1_creada = True

        if len(self.headers_SG_diam_marked) > 0:
            self.tabla_completa['Def Diametral SG 1'] = self.tabla_completa[
                self.headers_SG_diam_marked[0] + " %"]
            if len(self.headers_SG_diam_marked) > 1:
                for i in range(1, len(self.headers_SG_diam_marked)):
                    self.tabla_completa['Def Diametral SG 1'] = (self.tabla_completa[
                                                                     'Def Diametral SG 1'] +
                                                                 self.tabla_completa[
                                                                     self.headers_SG_diam_marked[
                                                                         i] + " %"
                                                                     ])
                self.tabla_completa['Def Diametral SG 1'] = np.round(self.tabla_completa[
                                                                         'Def Diametral SG 1'] /
                                                                     len(self.headers_SG_diam_marked),
                                                                     decimals=5)
            self.def_diam_SG_inicial = self.tabla_completa['Def Diametral SG 1'].to_numpy()

        if len(self.headers_PP_axial_marked) > 0:
            self.tabla_completa['Def Axial PP'] = self.tabla_completa[
                self.headers_PP_axial_marked[0] + " %"]
            if len(self.headers_PP_axial_marked) > 1:
                for i in range(1, len(self.headers_PP_axial_marked)):
                    self.tabla_completa['Def Axial PP'] = (
                            self.tabla_completa['Def Axial PP'] +
                            self.tabla_completa[
                                self.headers_PP_axial_marked[i] + " %"]
                    )
                self.tabla_completa['Def Axial PP'] = np.round(
                    self.tabla_completa['Def Axial PP']
                    / len(self.headers_PP_axial_marked), decimals=5)

            self.def_axial_PP_inicial = self.tabla_completa['Def Axial PP'].to_numpy()
            self.def_PP_creada = True

        if len(self.headers_PP_diam_marked) > 0:
            self.tabla_completa['Def Diametral PP'] = self.tabla_completa[
                self.headers_PP_diam_marked[0] + " %"]
            if len(self.headers_PP_diam_marked) > 1:
                for i in range(1, len(self.headers_PP_diam_marked)):
                    self.tabla_completa['Def Diametral PP'] = (self.tabla_completa[
                                                                   'Def Diametral PP'] +
                                                               self.tabla_completa[
                                                                   self.headers_PP_diam_marked[
                                                                       i] + " %"
                                                                   ])
                self.tabla_completa['Def Diametral PP'] = np.round(self.tabla_completa[
                                                                       'Def Diametral PP'],
                                                                   decimals=5)

            self.def_diam_PP_inicial = self.tabla_completa['Def Diametral PP'].to_numpy()

        self.def_SG_2_creada = False

        self.deformaciones_agregadas = (
            (self.def_SG_1_creada, 'Def Axial SG 1', 'Def Diametral SG 1', 'Strain Gauges 1', ' Corregida',
             'Def Volumetrica SG 1'),
            (self.def_SG_2_creada, 'Def Axial SG 2', 'Def Diametral SG 2', 'Strain Gauges 2', ' Corregida',
             'Def Volumetrica SG 2'),
            (self.def_PP_creada, 'Def Axial PP', 'Def Diametral PP', 'Palpadores', ' Corregida', 'Def Volumetrica PP')
        )  # LISTA CON TRUES Y FALSES, DEPENDIENDO DE SE AGREG√ì A LA TABLA

        for i in range(0, 3):
            if self.deformaciones_agregadas[i][0] == True:
                self.tabla_completa[self.deformaciones_agregadas[i][1]
                ] = round(self.tabla_completa[self.deformaciones_agregadas[i][1]
                          ] - self.tabla_completa[self.deformaciones_agregadas[i][1]][0], 5)

                self.tabla_completa[self.deformaciones_agregadas[i][2]
                ] = round(self.tabla_completa[self.deformaciones_agregadas[i][2]
                          ] - self.tabla_completa[self.deformaciones_agregadas[i][2]][0], 5)

        for i in range(0, 3):
            if self.deformaciones_agregadas[i][0]:
                self.tabla_completa[self.deformaciones_agregadas[i][2]] = - \
                    self.tabla_completa[self.deformaciones_agregadas[i][2]]

        self.asignar_opciones_combobox_graficos(matriz=self.deformaciones_agregadas)
        return

    def agregar_def_volumetricas(self):
        try:
            self.tabla_completa["Def Volumetrica SG 1"] = self.tabla_completa['Def Axial SG 1'] + 2 * \
                                                          self.tabla_completa[
                                                              "Def Diametral SG 1"]
        except:
            pass

        try:
            self.tabla_completa["Def Volumetrica SG 1 Corregida"] = self.tabla_completa[
                                                                        'Def Axial SG 1 Corregida'] + 2 * \
                                                                    self.tabla_completa[
                                                                        "Def Diametral SG 1 Corregida"]
        except:
            pass

        try:
            self.tabla_completa["Def Volumetrica PP"] = self.tabla_completa['Def Axial PP'] + 2 * self.tabla_completa[
                "Def Diametral PP"]
        except:
            pass

        try:
            self.tabla_completa["Def Volumetrica PP Corregida"] = self.tabla_completa['Def Axial PP Corregida'] + 2 * \
                                                                  self.tabla_completa[
                                                                      "Def Diametral PP Corregida"]
        except:
            pass

    def obtener_esf_peak(self):

        self.index_esf_peak = self.tabla_completa["Esfuerzo Axial"].idxmax()

        self.carga_maxima = self.tabla_completa['FUERZA 300'].max()
        self.esfuerzo_maximo = self.tabla_completa["Esfuerzo Axial"].max()
        self.esfuerzo_maximo_norm = self.esfuerzo_maximo * ((self.diametro / 50) ** 0.18)

        self.tiempo_pre_peak_segundos = self.tabla_completa['Tiempo'][self.index_esf_peak]
        self.tiempo_pre_peak = round(self.tabla_completa['Tiempo'][self.index_esf_peak] / 3600, 3)

        self.lista_headers_tabla = self.tabla_completa.columns

        contador = 0
        for i in self.lista_headers_tabla:
            if i == 'Tiempo':
                self.tiempo_ensayo = round(self.tabla_completa.iloc[-1, contador] / 3600, 3)
            contador += 1
        self.tiempo_post_peak = self.tiempo_ensayo - self.tiempo_pre_peak

        self.lineEdit_CargMax.setText(str(round(self.carga_maxima, 3)))
        self.lineEdit_ResMax.setText(str(round(self.esfuerzo_maximo, 3)))
        self.lineEdit_ResMaxNorm.setText(str(round(self.esfuerzo_maximo_norm, 3)))

        self.lineEdit_Duracion_PrePeak.setText(str(round(self.tiempo_pre_peak, 3)))
        self.lineEdit_Duracion_PostPeak.setText(str(round(self.tiempo_post_peak, 3)))
        self.lineEdit_Duracion_Ensayo.setText(str(round(self.tiempo_ensayo, 3)))
        self.lineEdit_Rel_LD.setText(str(round(self.relacion_LD, 3)))

    def asinar_opciones_combobox_signo_deformacion(self):

        self.comboBox.clear()

        for i in range(0, 3):
            if self.deformaciones_agregadas[i][0]:
                self.comboBox.addItem(self.deformaciones_agregadas[i][1])
                self.comboBox.addItem(self.deformaciones_agregadas[i][2])

    def funcion_corregir_deformacion(self):
        self.sensibilidad_correccion_deformacion = float(self.lineEdit_7.text()) if \
            self.lineEdit_7.text() != '' else -1
        for j in range(0, 3):

            if self.deformaciones_agregadas[j][0]:

                array_1_axial = np.array(
                    self.tabla_completa[self.deformaciones_agregadas[j][1]][0::])
                array_2_axial = np.array(
                    self.tabla_completa[self.deformaciones_agregadas[j][1]][1::])
                array_3_axial = np.array([0])
                array_4_axial = np.concatenate((array_2_axial, array_3_axial))

                diferencias_axial = array_4_axial - array_1_axial
                diferencias_axial = np.concatenate((array_3_axial, diferencias_axial[0:-1]))

                array_1_diam = np.array(
                    self.tabla_completa[self.deformaciones_agregadas[j][2]][0::])
                array_2_diam = np.array(
                    self.tabla_completa[self.deformaciones_agregadas[j][2]][1::])
                array_3_diam = np.array([0])
                array_4_diam = np.concatenate((array_2_diam, array_3_diam))

                diferencias_diam = array_4_diam - array_1_diam
                diferencias_diam = np.concatenate((array_3_diam, diferencias_diam[0:-1]))

                self.tabla_completa[
                    self.deformaciones_agregadas[j][1] + self.deformaciones_agregadas[j][4]] = \
                    self.tabla_completa[self.deformaciones_agregadas[j][1]]

                self.tabla_completa[
                    self.deformaciones_agregadas[j][2] + self.deformaciones_agregadas[j][4]] = \
                    self.tabla_completa[self.deformaciones_agregadas[j][2]]

                for i in range(1, len(self.tabla_completa)):
                    if diferencias_axial[i] <= self.sensibilidad_correccion_deformacion:
                        self.tabla_completa[self.deformaciones_agregadas[j][1] +
                                            self.deformaciones_agregadas[j][4]][i
                        ] = \
                            round(self.tabla_completa[
                                      self.deformaciones_agregadas[j][1] +
                                      self.deformaciones_agregadas[j][4]][i - 1] + abs(
                                diferencias_axial[i]), 5)
                    else:
                        self.tabla_completa[
                            self.deformaciones_agregadas[j][1] +
                            self.deformaciones_agregadas[j][4]][
                            i] = \
                            round(self.tabla_completa[
                                      self.deformaciones_agregadas[j][1] +
                                      self.deformaciones_agregadas[j][4]][i - 1] +
                                  diferencias_axial[i], 5)

                    if diferencias_diam[i] <= self.sensibilidad_correccion_deformacion:
                        self.tabla_completa[self.deformaciones_agregadas[j][2] +
                                            self.deformaciones_agregadas[j][4]][i
                        ] = \
                            round(self.tabla_completa[
                                      self.deformaciones_agregadas[j][2] +
                                      self.deformaciones_agregadas[j][4]][i - 1] - abs(
                                diferencias_diam[i]), 5)

                    else:
                        self.tabla_completa[
                            self.deformaciones_agregadas[j][2] +
                            self.deformaciones_agregadas[j][4]][
                            i] = \
                            round(self.tabla_completa[
                                      self.deformaciones_agregadas[j][2] +
                                      self.deformaciones_agregadas[j][4]][i - 1] +
                                  diferencias_diam[i], 5)

                    pass

                if len(self.tabla_completa) > 0:

                    array_1_axial = np.array(
                        self.tabla_completa[self.deformaciones_agregadas[j][1]][0::])
                    array_2_axial = np.array(
                        self.tabla_completa[self.deformaciones_agregadas[j][1]][1::])
                    array_3_axial = np.array([0])
                    array_4_axial = np.concatenate((array_2_axial, array_3_axial))

                    diferencias_axial = array_4_axial - array_1_axial
                    diferencias_axial = np.concatenate((array_3_axial, diferencias_axial[0:-1]))

                    array_1_diam = np.array(
                        self.tabla_completa[self.deformaciones_agregadas[j][2]][0::])
                    array_2_diam = np.array(
                        self.tabla_completa[self.deformaciones_agregadas[j][2]][1::])
                    array_3_diam = np.array([0])
                    array_4_diam = np.concatenate((array_2_diam, array_3_diam))

                    diferencias_diam = array_4_diam - array_1_diam
                    diferencias_diam = np.concatenate((array_3_diam, diferencias_diam[0:-1]))

                    self.tabla_completa[
                        self.deformaciones_agregadas[j][1] + self.deformaciones_agregadas[j][4]] = \
                        self.tabla_completa[self.deformaciones_agregadas[j][1]]

                    self.tabla_completa[
                        self.deformaciones_agregadas[j][2] + self.deformaciones_agregadas[j][4]] = \
                        self.tabla_completa[self.deformaciones_agregadas[j][2]]

                    for i in range(1, len(self.tabla_completa)):
                        if diferencias_axial[i] <= self.sensibilidad_correccion_deformacion:
                            self.tabla_completa[self.deformaciones_agregadas[j][1] +
                                                self.deformaciones_agregadas[j][4]][i
                            ] = \
                                round(self.tabla_completa[
                                          self.deformaciones_agregadas[j][1] +
                                          self.deformaciones_agregadas[j][4]][
                                          i - 1] + abs(
                                    diferencias_axial[i]), 5)
                        else:
                            self.tabla_completa[
                                self.deformaciones_agregadas[j][1] +
                                self.deformaciones_agregadas[j][4]][
                                i] = \
                                round(self.tabla_completa[
                                          self.deformaciones_agregadas[j][1] +
                                          self.deformaciones_agregadas[j][4]][i - 1] +
                                      diferencias_axial[i], 5)

                        if diferencias_diam[i] <= self.sensibilidad_correccion_deformacion:
                            self.tabla_completa[self.deformaciones_agregadas[j][2] +
                                                self.deformaciones_agregadas[j][4]][i
                            ] = \
                                round(self.tabla_completa[
                                          self.deformaciones_agregadas[j][2] +
                                          self.deformaciones_agregadas[j][4]][
                                          i - 1] - abs(
                                    diferencias_diam[i]), 5)

                        else:
                            self.tabla_completa[
                                self.deformaciones_agregadas[j][2] +
                                self.deformaciones_agregadas[j][4]][
                                i] = \
                                round(self.tabla_completa[
                                          self.deformaciones_agregadas[j][2] +
                                          self.deformaciones_agregadas[j][4]][i - 1] +
                                      diferencias_diam[i], 5)

                        pass

        pass

    def obtener_tabla_pre_peak(self):

        self.tabla_pre_peak = self.tabla_completa.copy()
        self.tabla_pre_peak.reset_index(inplace=True, drop=True)
        self.tabla_pre_peak = self.tabla_pre_peak[self.tabla_pre_peak[
                                                      "Tiempo"] <= self.tiempo_pre_peak_segundos]

        return

    # ------------------------------------- #
    # FUNCIONES DEL APARTADO GRAFICOS
    # ------------------------------------- #

    #     MATRIZ ES LA SIGUIENTE
    #     self.deformaciones_agregadas = (
    #     (self.def_SG_1_creada, 'Def Axial SG 1', 'Def Diametral SG 1', 'Strain Gauges 1', ' Corregida','Def Volumetrica SG 1'),
    #     (self.def_SG_2_creada, 'Def Axial SG 2', 'Def Diametral SG 2', 'Strain Gauges 2', ' Corregida', 'Def Volumetrica SG 2'),
    #     (self.def_PP_creada, 'Def Axial PP', 'Def Diametral PP', 'Palpadores', 'Corregida', 'Def Volumetrica PP')

    def asignar_opciones_combobox_graficos(self, matriz=None, correccion_defs=None):

        self.comboBox_8.clear()
        for i in range(0, 3):
            if matriz[i][0]:
                self.comboBox_8.addItem(matriz[i][3])
                if correccion_defs == 'si':
                    self.comboBox_8.addItem(matriz[i][3] + matriz[i][4])

        self.combobox_eje_x_grafico_1 = [
            self.comboBox_2,
            self.comboBox_6,
            self.comboBox_7,
            # self.comboBox_3
        ]

        self.combobox_eje_y_grafico_1 = [
            self.comboBox_3
        ]

        self.combobox_eje_x_grafico_2 = [
            self.comboBox_4,
            # self.comboBox_6,
            # self.comboBox_7,
            # self.comboBox_3
        ]

        self.combobox_eje_y_grafico_2 = [
            self.comboBox_5
        ]

        self.seleccionar_elementos_eje_graficos(matriz=matriz)
        return

    def seleccionar_elementos_eje_graficos(self, matriz=None):

        # COMPONENTES DEL PRIMER GRAFICO (IZQUIERDA)
        for i in self.combobox_eje_x_grafico_1:
            i.clear()
        for i in self.combobox_eje_y_grafico_1:
            i.clear()
        for i in self.combobox_eje_x_grafico_2:
            i.clear()
        for i in self.combobox_eje_y_grafico_2:
            i.clear()

        self.comboBox_3.addItem('Esfuerzo Axial')
        for i in self.tabla_completa.columns:
            if findall('FUERZA', i):
                self.comboBox_3.addItem(i)

        # print(self.comboBox_8.isEnabled())

        for i in range(0, 3):
            if matriz[i][0]:
                if self.comboBox_8.currentText() == matriz[i][3]:

                    for j in self.combobox_eje_x_grafico_1:
                        j.addItem(matriz[i][1])
                        j.addItem(matriz[i][2])
                        j.addItem(matriz[i][5])
                        if self.combobox_eje_x_grafico_1.index(j) == 0:
                            j.setCurrentText(matriz[i][1])
                        if self.combobox_eje_x_grafico_1.index(j) == 1:
                            j.setCurrentText(matriz[i][2])
                        if self.combobox_eje_x_grafico_1.index(j) == 2:
                            j.setCurrentText(matriz[i][5])

                    for j in self.combobox_eje_x_grafico_2:
                        j.addItem(matriz[i][1])
                        j.addItem(matriz[i][2])
                        j.addItem(matriz[i][5])
                        if self.combobox_eje_x_grafico_2.index(j) == 0:
                            j.setCurrentText(matriz[i][1])

                    for j in self.combobox_eje_y_grafico_2:
                        j.addItem(matriz[i][1])
                        j.addItem(matriz[i][2])
                        j.addItem(matriz[i][5])
                        if self.combobox_eje_y_grafico_2.index(j) == 0:
                            j.setCurrentText(matriz[i][1])
                        if self.combobox_eje_y_grafico_2.index(j) == 0:
                            j.setCurrentText(matriz[i][2])

                if self.comboBox_8.currentText() == matriz[i][3] + matriz[i][4]:

                    for j in self.combobox_eje_x_grafico_1:
                        j.addItem(matriz[i][1] + matriz[i][4])
                        j.addItem(matriz[i][2] + matriz[i][4])
                        j.addItem(matriz[i][5] + matriz[i][4])
                        if self.combobox_eje_x_grafico_1.index(j) == 0:
                            j.setCurrentText(matriz[i][1] + matriz[i][4])
                        if self.combobox_eje_x_grafico_1.index(j) == 1:
                            j.setCurrentText(matriz[i][2] + matriz[i][4])
                        if self.combobox_eje_x_grafico_1.index(j) == 2:
                            j.setCurrentText(matriz[i][5] + matriz[i][4])

                    for j in self.combobox_eje_x_grafico_2:
                        j.addItem(matriz[i][1] + matriz[i][4])
                        j.addItem(matriz[i][2] + matriz[i][4])
                        # j.addItem(matriz[i][5]+matriz[i][4])
                        if self.combobox_eje_x_grafico_2.index(j) == 0:
                            j.setCurrentText(matriz[i][1] + matriz[i][4])

                    for j in self.combobox_eje_y_grafico_2:
                        j.addItem(matriz[i][1] + matriz[i][4])
                        j.addItem(matriz[i][2] + matriz[i][4])
                        if self.combobox_eje_y_grafico_2.index(j) == 0:
                            j.setCurrentText(matriz[i][2] + matriz[i][4])

                self.signal(selec_elem_eje_grafico=1)
        return

    def graficos(self):

        self.widget_2.hide()
        self.widget_3.hide()

        try:
            del self.grafico_1
            del self.grafico_2
        except:
            pass

        self.grafico_1 = Grafico(
            # parent=self.widget_2,
            self.widget_2,
            matriz=self.deformaciones_agregadas,
            tabla=self.tabla_pre_peak,
            eje_x_graf=self.combobox_eje_x_grafico_1,
            eje_y_graf=self.combobox_eje_y_grafico_1,
            figsize=(5.2, 5.2),
            current_text_combobox=self.comboBox_8.currentText(),
            eje_x_legend=f"Deformaciones (%)",
            eje_y_legend=self.comboBox_3.currentText(),
            decimales_y=str('%.1f')
        )

        self.grafico_2 = Grafico(
            # parent=self.widget_3,
            self.widget_3,
            matriz=self.deformaciones_agregadas,
            tabla=self.tabla_pre_peak,
            eje_x_graf=self.combobox_eje_x_grafico_2,
            eje_y_graf=self.combobox_eje_y_grafico_2,
            figsize=(5.2, 5.2),
            current_text_combobox=self.comboBox_8.currentText(),
            eje_x_legend=self.comboBox_4.currentText(),
            eje_y_legend=self.comboBox_5.currentText(),
            titulo=f"Deformaciones",
            decimales_y=str('%.2f')
        )

        self.grafico_1.graficar()
        self.grafico_2.graficar()

        self.widget_2.show()
        self.widget_3.show()

        self.span_grafico_1 = SpanSelector(
            self.grafico_1.ax,
            self.seleccionar_area_grafico_1,
            'horizontal',
            useblit=True,
            rectprops=dict(alpha=0.5, facecolor='red')
        )

    def seleccionar_area_grafico_1(self, min_value, max_value):

        self.deformacion_axial = self.tabla_pre_peak[self.comboBox_2.currentText()].to_numpy()
        self.esfuerzo = self.tabla_pre_peak[self.comboBox_3.currentText()].to_numpy()

        self.indmin, self.indmax = np.searchsorted(self.deformacion_axial, (min_value, max_value))
        self.indmax = min(len(self.deformacion_axial) - 1, self.indmax)

        self.thisx = self.deformacion_axial[self.indmin:self.indmax]
        self.thisy = self.esfuerzo[self.indmin:self.indmax]

        if len(self.thisx) == 1:
            self.warning(f'Debes seleccionar como minimo dos puntos para realizar\nel ajuste lineal')

        try:
            self.def_min, self.def_max = self.thisx[0], self.thisx[-1]
        except IndexError:
            return

        try:
            self.axvspan_1.remove()
        except:
            pass
        try:
            self.axvspan_2.remove()
        except:
            pass

        self.axvspan_1 = self.grafico_1.ax.axvspan(self.def_min, self.def_max, color='red', alpha=0.1)
        self.axvspan_2 = self.grafico_2.ax.axvspan(self.def_min, self.def_max, color='red', alpha=0.1)
        self.grafico_1.fig.canvas.draw_idle()
        self.grafico_2.fig.canvas.draw_idle()

        print(self.def_min, self.def_max)
        return self.def_min, self.def_max

    def crear_tabla_modulos_elasticos(self):

        self.def_axial_elast = self.tabla_pre_peak[self.comboBox_2.currentText()][self.indmin:self.indmax].to_numpy()
        self.def_diam_elast = self.tabla_pre_peak[self.comboBox_6.currentText()][self.indmin:self.indmax].to_numpy()
        self.esf_axial_elast = self.tabla_pre_peak[self.comboBox_3.currentText()][self.indmin:self.indmax].to_numpy()

        if self.comboBox_8.currentText() == 'Strain Gauges 1' or self.comboBox_8.currentText() == 'Strain Gauges 1 Corregida':



            pass

    def signal(self, selec_elem_eje_grafico=None):

        if self.contador_eje_grafico == 0 and selec_elem_eje_grafico == 1:
            self.comboBox_8.currentIndexChanged.connect(
                lambda: self.seleccionar_elementos_eje_graficos(matriz=self.deformaciones_agregadas))
            self.contador_eje_grafico = 1

        elif self.contador_eje_grafico == 1:
            try:
                self.graficos()
            except KeyError:
                pass

    def warning(self, texto):
        dlg = QtWidgets.QMessageBox()
        dlg.setWindowTitle("Advertencia")
        dlg.setText(texto)
        dlg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        dlg.setIcon(QtWidgets.QMessageBox.Question)
        button = dlg.exec()

        if button == QtWidgets.QMessageBox.Ok:
            return


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ModulosElasticos = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(ModulosElasticos)
    ModulosElasticos.show()
    sys.exit(app.exec_())
